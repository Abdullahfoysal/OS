/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapp;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;

/**
 *
 * @author foysal
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msg_area = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_area.setText("server is ON");
        msg_area.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_areaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(msg_area, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(msg_area, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_areaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_areaActionPerformed
       
        
    }//GEN-LAST:event_msg_areaActionPerformed

    /**
     * @param args the command line arguments
     */
    //my code start
    static Vector<ClientHandler>ar=new Vector<>();
    
        JFrame f=new JFrame();
    static DefaultListModel<String> Active = new DefaultListModel<>();  
                
	
	static int ClientCount=0;
	public static void main(String[] args) throws IOException {
            
            
             /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
		
		ServerSocket ss=new ServerSocket(1234);
		Socket s;
                 
		
		while(true) {
			s=ss.accept();
			System.out.println("New client request received "+s );
			
			DataInputStream dis=new DataInputStream(s.getInputStream());
			DataOutputStream dos=new DataOutputStream(s.getOutputStream());
			String name=dis.readUTF();
			
			System.out.println("creating a new handler for this client..");
			
			ClientHandler mtch=new ClientHandler(s,name,dis,dos);
			
			Thread t=new Thread(mtch);
                        
                        //print to server textArea
                        msg_area.setText(msg_area.getText().trim()+" "+name+ " Added to Server\n");
			
      			System.out.println("Adding this client to active client list");
                        
                       
			
			ar.add(mtch);
                        
                        Active.addElement(name);
                        
                        final JList<String> ActiveList = new JList<>(Active);  
			
			t.start();
			
			ClientCount++;
			
			
			
		
		}
	}
        
	

//}

    
    
    
    ///end my code
    
    
    
    
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Server().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField msg_area;
    // End of variables declaration//GEN-END:variables
}

///client handler code start
class ClientHandler implements Runnable{
	 
	 Scanner scn=new Scanner(System.in);
	 private String name;
	 private DataInputStream dis;
	 private DataOutputStream dos;
	 Socket s;
	 boolean isloggedin;
	 
	 public ClientHandler(Socket s, String name,DataInputStream dis,DataOutputStream dos) {
		 
		 this.dis=dis;
		 this.name=name;
		 this.dos=dos;
		 this.isloggedin=true;
                
		 
	 }

	@Override
	public void run() {
		String received;
		while(true) {
			try {
				received=dis.readUTF();
                                
				System.out.println(received+" server");
				if(received.contentEquals("logout")) {
					this.isloggedin=false;
					this.dis.close();
					break;
				}
				
				//break message to message vs recepient
				StringTokenizer st=new StringTokenizer(received,"#");
				String MsgToSend=st.nextToken();
				String recepient=st.nextToken();
				
				//search recepient in active list
				
				for(ClientHandler mc:Server.ar) {
					if(mc.name.contentEquals(recepient) && mc.isloggedin==true) {
						mc.dos.writeUTF(this.name+ " : " + MsgToSend+'\n');
						break;
					}
                                        
                                        
                                        
				}
				
				
				
				
			} catch (IOException e) {
				
				e.printStackTrace();
			}
		}
		
		try {
			this.dis.close();
			this.dos.close();
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}

///client handler code end
